{"version":3,"file":"index.js","sourceRoot":"","sources":["../../index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Notification } from 'rxjs/Notification';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { TestMessage } from 'rxjs/testing/TestMessage';\nimport { TestScheduler } from 'rxjs/testing/TestScheduler';\n\nimport {\n  getTestScheduler,\n  initTestScheduler,\n  resetTestScheduler,\n} from './src/scheduler';\nimport {\n  TestColdObservable,\n  TestHotObservable,\n  TestObservable,\n} from './src/test-observables';\n\nexport {\n  getTestScheduler,\n  initTestScheduler,\n  resetTestScheduler,\n} from './src/scheduler';\n\nexport function hot(\n  marbles: string,\n  values?: any,\n  error?: any,\n): TestHotObservable {\n  return new TestHotObservable(marbles, values, error);\n}\n\nexport function cold(\n  marbles: string,\n  values?: any,\n  error?: any,\n): TestColdObservable {\n  return new TestColdObservable(marbles, values, error);\n}\n\nexport function time(marbles: string): number {\n  return getTestScheduler().createTime(marbles);\n}\n\ndeclare global {\n  namespace jasmine {\n    interface Matchers<T> {\n      toBeObservable: any;\n    }\n  }\n}\n\n/*\n* Based on source code found in rxjs library\n* https://github.com/ReactiveX/rxjs/blob/master/src/testing/TestScheduler.ts\n*\n*/\nfunction materializeInnerObservable(\n  observable: Observable<any>,\n  outerFrame: number,\n): TestMessage[] {\n  const messages: TestMessage[] = [];\n  const scheduler = getTestScheduler();\n\n  observable.subscribe(\n    value => {\n      messages.push({\n        frame: scheduler.frame - outerFrame,\n        notification: Notification.createNext(value),\n      });\n    },\n    err => {\n      messages.push({\n        frame: scheduler.frame - outerFrame,\n        notification: Notification.createError(err),\n      });\n    },\n    () => {\n      messages.push({\n        frame: scheduler.frame - outerFrame,\n        notification: Notification.createComplete(),\n      });\n    },\n  );\n  return messages;\n}\n\nexport function addMatchers() {\n  jasmine.addMatchers({\n    toBeObservable: () => ({\n      compare: function(actual: TestObservable, fixture: TestObservable) {\n        const results: TestMessage[] = [];\n        let subscription: Subscription;\n        const scheduler = getTestScheduler();\n\n        scheduler.schedule(() => {\n          subscription = actual.subscribe(\n            (x: any) => {\n              let value = x;\n\n              // Support Observable-of-Observables\n              if (x instanceof Observable) {\n                value = materializeInnerObservable(value, scheduler.frame);\n              }\n\n              results.push({\n                frame: scheduler.frame,\n                notification: Notification.createNext(value),\n              });\n            },\n            (err: any) => {\n              results.push({\n                frame: scheduler.frame,\n                notification: Notification.createError(err),\n              });\n            },\n            () => {\n              results.push({\n                frame: scheduler.frame,\n                notification: Notification.createComplete(),\n              });\n            },\n          );\n        });\n        scheduler.flush();\n\n        const expected = TestScheduler.parseMarbles(\n          fixture.marbles,\n          fixture.values,\n          fixture.error,\n          true,\n        );\n\n        expect(results).toEqual(expected);\n\n        return { pass: true };\n      },\n    }),\n  });\n}\n\nif (typeof module === 'object' && module.exports) {\n  jasmine.getEnv().beforeAll(() => addMatchers());\n\n  jasmine.getEnv().beforeEach(() => initTestScheduler());\n  jasmine.getEnv().afterEach(() => {\n    getTestScheduler().flush();\n    resetTestScheduler();\n  });\n}\n"]}