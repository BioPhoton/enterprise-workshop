#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
var tmp_1 = require("tmp");
var semver_1 = require("semver");
var fs_1 = require("fs");
var path = require("path");
var ɵ0 = function (p) { return p === '--yarn'; };
exports.ɵ0 = ɵ0;
var useYarn = process.argv.filter(ɵ0).length > 0;
if (!useYarn) {
    try {
        // check the correct version of the NPM is installed
        var output = child_process_1.execSync('npm --version').toString();
        if (semver_1.lt(output, '5.0.0')) {
            console.error('To create a workspace you must have NPM >= 5.0.0 installed.');
            process.exit(1);
        }
    }
    catch (e) {
        console.error('Cannot find npm. If you want to use yarn to create a project, pass the --yarn flag.');
        process.exit(1);
    }
}
var ɵ1 = function (arg) { return !arg.startsWith('--'); };
exports.ɵ1 = ɵ1;
var projectName = process.argv
    .slice(2)
    .filter(ɵ1)[0];
// check that the workspace name is passed in
if (!projectName) {
    console.error('Please provide a project name (e.g., create-nx-workspace nrwl-proj)');
    process.exit(1);
}
// creating the sandbox
console.log('Creating a sandbox with the CLI and Nx Schematics...');
var tmpDir = tmp_1.dirSync().name;
var nxVersion = JSON.parse(fs_1.readFileSync(path.join(path.dirname(__dirname), 'package.json'), 'UTF-8')).version;
fs_1.writeFileSync(path.join(tmpDir, 'package.json'), JSON.stringify({
    dependencies: {
        '@nrwl/schematics': nxVersion,
        '@angular/cli': '1.7.1'
    },
    license: 'MIT'
}));
if (useYarn) {
    child_process_1.execSync('yarn install --silent', { cwd: tmpDir, stdio: [0, 1, 2] });
}
else {
    child_process_1.execSync('npm install --silent', { cwd: tmpDir, stdio: [0, 1, 2] });
}
var ɵ3 = function (a) { return a !== '--yarn'; }, ɵ2 = function (a) { return "\"" + a + "\""; };
exports.ɵ3 = ɵ3;
exports.ɵ2 = ɵ2;
// creating the app itself
var args = process.argv
    .slice(2)
    .filter(ɵ3)
    .map(ɵ2)
    .join(' ');
console.log("ng new " + args + " --collection=@nrwl/schematics");
child_process_1.execSync(path.join(tmpDir, 'node_modules', '.bin', 'ng') + " new " + args + " --skip-install --collection=@nrwl/schematics", {
    stdio: [0, 1, 2]
});
var ɵ4 = function (a) { return a.startsWith('-dir') || a.startsWith('--directory'); };
exports.ɵ4 = ɵ4;
var dir = process.argv.filter(ɵ4)[0];
var cwd = dir ? dir.split('=')[1] : projectName;
if (useYarn) {
    child_process_1.execSync("yarn install", { stdio: [0, 1, 2], cwd: cwd });
}
else {
    child_process_1.execSync("npm install", { stdio: [0, 1, 2], cwd: cwd });
}
