"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
var path = require("path");
var resolve = require("resolve");
var shared_1 = require("./shared");
function format(args) {
    var command = args[0];
    var patterns;
    try {
        patterns = getPatterns(args);
    }
    catch (e) {
        printError(command, e);
        process.exit(1);
    }
    switch (command) {
        case 'write':
            write(patterns);
            break;
        case 'check':
            check(patterns);
            break;
    }
}
exports.format = format;
function getPatterns(args) {
    try {
        var p = shared_1.parseFiles(args.slice(1));
        var patterns = p.files.filter(function (f) { return path.extname(f) === '.ts'; });
        var rest = p.rest;
        var libsAndApp = rest.filter(function (a) { return a.startsWith('--libs-and-apps'); })[0];
        return libsAndApp ? getPatternsFromApps(patterns) : patterns;
    }
    catch (e) {
        return ['"{apps,libs}/**/*.ts"'];
    }
}
function getPatternsFromApps(affectedFiles) {
    var roots = shared_1.getProjectRoots(shared_1.getTouchedProjects(affectedFiles));
    if (roots.length === 0) {
        return [];
    }
    else if (roots.length === 1) {
        return ["\"" + roots[0] + "/**/*.ts\""];
    }
    else {
        return ["\"{" + roots.join(',') + "}/**/*.ts\""];
    }
}
function printError(command, e) {
    console.error("Pass the SHA range, as follows: npm run format:" + command + " -- SHA1 SHA2.");
    console.error("Or pass the list of files, as follows: npm run format:" + command + " -- --files=\"libs/mylib/index.ts,libs/mylib2/index.ts\".");
    console.error(e.message);
}
function write(patterns) {
    if (patterns.length > 0) {
        child_process_1.execSync("node " + prettierPath() + " --write " + patterns.join(' '), {
            stdio: [0, 1, 2]
        });
    }
}
function check(patterns) {
    if (patterns.length > 0) {
        try {
            child_process_1.execSync("node " + prettierPath() + " --list-different " + patterns.join(' '), {
                stdio: [0, 1, 2]
            });
        }
        catch (e) {
            process.exit(1);
        }
    }
}
function prettierPath() {
    var basePath = path.dirname(resolve.sync('prettier', { basedir: __dirname }));
    return path.join(basePath, 'bin-prettier.js');
}
