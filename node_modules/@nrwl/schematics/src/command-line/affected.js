"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
var shared_1 = require("./shared");
var path = require("path");
var resolve = require("resolve");
function affected(args) {
    var command = args[0];
    var apps;
    var rest;
    try {
        var p = shared_1.parseFiles(args.slice(1));
        rest = p.rest;
        apps = shared_1.getAffectedApps(p.files);
    }
    catch (e) {
        printError(command, e);
        process.exit(1);
    }
    switch (command) {
        case 'apps':
            console.log(apps.join(' '));
            break;
        case 'build':
            build(apps, rest);
            break;
        case 'e2e':
            e2e(apps, rest);
            break;
    }
}
exports.affected = affected;
function printError(command, e) {
    console.error("Pass the SHA range, as follows: npm run affected:" + command + " -- SHA1 SHA2.");
    console.error("Or pass the list of files, as follows: npm run affected:" + command + " -- --files=\"libs/mylib/index.ts,libs/mylib2/index.ts\".");
    console.error(e.message);
}
function build(apps, rest) {
    if (apps.length > 0) {
        console.log("Building " + apps.join(', '));
        apps.forEach(function (app) {
            child_process_1.execSync("node " + ngPath() + " build " + rest.join(' ') + " -a=" + app, {
                stdio: [0, 1, 2]
            });
        });
    }
    else {
        console.log('No apps to build');
    }
}
function e2e(apps, rest) {
    if (apps.length > 0) {
        console.log("Testing " + apps.join(', '));
        apps.forEach(function (app) {
            child_process_1.execSync("node " + ngPath() + " e2e " + rest.join(' ') + " -a=" + app, {
                stdio: [0, 1, 2]
            });
        });
    }
    else {
        console.log('No apps to test');
    }
}
function ngPath() {
    var basePath = path.dirname(path.dirname(path.dirname(resolve.sync('@angular/cli', { basedir: __dirname }))));
    return path.join(basePath, 'bin', 'ng');
}
