import { EventEmitter, InjectionToken } from "@angular/core";
import { Observable } from "rxjs";
import { MissingTranslationHandler } from "./missing-translation-handler";
import { TranslateCompiler } from "./translate.compiler";
import { TranslateLoader } from "./translate.loader";
import { TranslateParser } from "./translate.parser";
import { TranslateStore } from "./translate.store";
export declare const USE_STORE: InjectionToken<string>;
export declare const USE_DEFAULT_LANG: InjectionToken<string>;
export interface TranslationChangeEvent {
    translations: any;
    lang: string;
}
export interface LangChangeEvent {
    lang: string;
    translations: any;
}
export interface DefaultLangChangeEvent {
    lang: string;
    translations: any;
}
export declare class TranslateService {
    store: TranslateStore;
    currentLoader: TranslateLoader;
    compiler: TranslateCompiler;
    parser: TranslateParser;
    missingTranslationHandler: MissingTranslationHandler;
    private useDefaultLang;
    private isolate;
    private loadingTranslations;
    private pending;
    private _onTranslationChange;
    private _onLangChange;
    private _onDefaultLangChange;
    private _defaultLang;
    private _currentLang;
    private _langs;
    private _translations;
    private _translationRequests;
    readonly onTranslationChange: EventEmitter<TranslationChangeEvent>;
    readonly onLangChange: EventEmitter<LangChangeEvent>;
    readonly onDefaultLangChange: EventEmitter<DefaultLangChangeEvent>;
    defaultLang: string;
    currentLang: string;
    langs: string[];
    translations: any;
    constructor(store: TranslateStore, currentLoader: TranslateLoader, compiler: TranslateCompiler, parser: TranslateParser, missingTranslationHandler: MissingTranslationHandler, useDefaultLang?: boolean, isolate?: boolean);
    setDefaultLang(lang: string): void;
    getDefaultLang(): string;
    use(lang: string): Observable<any>;
    private retrieveTranslations(lang);
    getTranslation(lang: string): Observable<any>;
    setTranslation(lang: string, translations: Object, shouldMerge?: boolean): void;
    getLangs(): Array<string>;
    addLangs(langs: Array<string>): void;
    private updateLangs();
    getParsedResult(translations: any, key: any, interpolateParams?: Object): any;
    get(key: string | Array<string>, interpolateParams?: Object): Observable<string | any>;
    stream(key: string | Array<string>, interpolateParams?: Object): Observable<string | any>;
    instant(key: string | Array<string>, interpolateParams?: Object): string | any;
    set(key: string, value: string, lang?: string): void;
    private changeLang(lang);
    private changeDefaultLang(lang);
    reloadLang(lang: string): Observable<any>;
    resetLang(lang: string): void;
    getBrowserLang(): string;
    getBrowserCultureLang(): string;
}
