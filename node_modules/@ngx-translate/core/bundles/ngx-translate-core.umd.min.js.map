{
  "version": 3,
  "file": "ngx-translate-core.umd.min.js",
  "sources": [
    "ng://@ngx-translate/core/node_modules/tslib/tslib.es6.js",
    "ng://@ngx-translate/core/out/src/util.ts",
    "ng://@ngx-translate/core/out/src/translate.loader.ts",
    "ng://@ngx-translate/core/out/src/missing-translation-handler.ts",
    "ng://@ngx-translate/core/out/src/translate.compiler.ts",
    "ng://@ngx-translate/core/out/src/translate.parser.ts",
    "ng://@ngx-translate/core/out/src/translate.store.ts",
    "ng://@ngx-translate/core/out/src/translate.service.ts",
    "ng://@ngx-translate/core/out/src/translate.directive.ts",
    "ng://@ngx-translate/core/out/src/translate.pipe.ts",
    "ng://@ngx-translate/core/out/index.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "/* tslint:disable */\n/**\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param o1 Object or value to compare.\n * @param o2 Object or value to compare.\n * @returns true if arguments are equal.\n */\nexport function equals(o1: any, o2: any): boolean {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  let t1 = typeof o1, t2 = typeof o2, length: number, key: any, keySet: any;\n  if (t1 == t2 && t1 == 'object') {\n    if (Array.isArray(o1)) {\n      if (!Array.isArray(o2)) return false;\n      if ((length = o1.length) == o2.length) {\n        for (key = 0; key < length; key++) {\n          if (!equals(o1[key], o2[key])) return false;\n        }\n        return true;\n      }\n    } else {\n      if (Array.isArray(o2)) {\n        return false;\n      }\n      keySet = Object.create(null);\n      for (key in o1) {\n        if (!equals(o1[key], o2[key])) {\n          return false;\n        }\n        keySet[key] = true;\n      }\n      for (key in o2) {\n        if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  return false;\n}\n/* tslint:enable */\n\nexport function isDefined(value: any): boolean {\n  return typeof value !== 'undefined' && value !== null;\n}\n\nexport function isObject(item: any): boolean {\n  return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\nexport function mergeDeep(target: any, source: any): any {\n  let output = Object.assign({}, target);\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach((key: any) => {\n      if (isObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, {[key]: source[key]});\n        } else {\n          output[key] = mergeDeep(target[key], source[key]);\n        }\n      } else {\n        Object.assign(output, {[key]: source[key]});\n      }\n    });\n  }\n  return output;\n}\n",
    "import {Injectable} from \"@angular/core\";\nimport {Observable, of} from \"rxjs\";\n\nexport abstract class TranslateLoader {\n  abstract getTranslation(lang: string): Observable<any>;\n}\n\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\n@Injectable()\nexport class TranslateFakeLoader extends TranslateLoader {\n  getTranslation(lang: string): Observable<any> {\n    return of({});\n  }\n}\n",
    "import {Injectable} from \"@angular/core\";\nimport {TranslateService} from \"./translate.service\";\n\nexport interface MissingTranslationHandlerParams {\n  /**\n   * the key that's missing in translation files\n   */\n  key: string;\n\n  /**\n   * an instance of the service that was unable to translate the key.\n   */\n  translateService: TranslateService;\n\n  /**\n   * interpolation params that were passed along for translating the given key.\n   */\n  interpolateParams?: Object;\n}\n\nexport abstract class MissingTranslationHandler {\n  /**\n   * A function that handles missing translations.\n   *\n   * @param params context for resolving a missing translation\n   * @returns a value or an observable\n   * If it returns a value, then this value is used.\n   * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\n   * If it doesn't return then the key will be used as a value\n   */\n  abstract handle(params: MissingTranslationHandlerParams): any;\n}\n\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\n@Injectable()\nexport class FakeMissingTranslationHandler implements MissingTranslationHandler {\n  handle(params: MissingTranslationHandlerParams): string {\n    return params.key;\n  }\n}\n",
    "import {Injectable} from \"@angular/core\";\n\nexport abstract class TranslateCompiler {\n  abstract compile(value: string, lang: string): string | Function;\n\n  abstract compileTranslations(translations: any, lang: string): any;\n}\n\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\n@Injectable()\nexport class TranslateFakeCompiler extends TranslateCompiler {\n  compile(value: string, lang: string): string | Function {\n    return value;\n  }\n\n  compileTranslations(translations: any, lang: string): any {\n    return translations;\n  }\n}\n",
    "import {Injectable} from \"@angular/core\";\nimport {isDefined} from \"./util\";\n\nexport abstract class TranslateParser {\n  /**\n   * Interpolates a string to replace parameters\n   * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\n   * @param expr\n   * @param params\n   */\n  abstract interpolate(expr: string | Function, params?: any): string;\n\n  /**\n   * Gets a value from an object by composed key\n   * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n   * @param target\n   * @param key\n   */\n  abstract getValue(target: any, key: string): any\n}\n\n@Injectable()\nexport class TranslateDefaultParser extends TranslateParser {\n  templateMatcher: RegExp = /{{\\s?([^{}\\s]*)\\s?}}/g;\n\n  public interpolate(expr: string | Function, params?: any): string {\n    let result: string;\n\n    if (typeof expr === 'string') {\n      result = this.interpolateString(expr, params);\n    } else if (typeof expr === 'function') {\n      result = this.interpolateFunction(expr, params);\n    } else {\n      // this should not happen, but an unrelated TranslateService test depends on it\n      result = expr as string;\n    }\n\n    return result;\n  }\n\n  getValue(target: any, key: string): any {\n    let keys = key.split('.');\n    key = '';\n    do {\n      key += keys.shift();\n      if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n        target = target[key];\n        key = '';\n      } else if (!keys.length) {\n        target = undefined;\n      } else {\n        key += '.';\n      }\n    } while (keys.length);\n\n    return target;\n  }\n\n  private interpolateFunction(fn: Function, params?: any) {\n    return fn(params);\n  }\n\n  private interpolateString(expr: string, params?: any) {\n    if (!params) {\n      return expr;\n    }\n\n    return expr.replace(this.templateMatcher, (substring: string, b: string) => {\n      let r = this.getValue(params, b);\n      return isDefined(r) ? r : substring;\n    });\n  }\n}\n",
    "import {EventEmitter} from \"@angular/core\";\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslationChangeEvent} from \"./translate.service\";\n\nexport class TranslateStore {\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   */\n  public defaultLang: string;\n\n  /**\n   * The lang currently used\n   */\n  public currentLang: string = this.defaultLang;\n\n  /**\n   * a list of translations per lang\n   */\n  public translations: any = {};\n\n  /**\n   * an array of langs\n   */\n  public langs: Array<string> = [];\n\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n   */\n  public onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  public onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  public onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n}\n",
    "import {EventEmitter, Inject, Injectable, InjectionToken} from \"@angular/core\";\nimport {concat, merge, Observable, Observer, of} from \"rxjs\";\nimport {map, share, switchMap, take, toArray} from \"rxjs/operators\";\nimport {MissingTranslationHandler, MissingTranslationHandlerParams} from \"./missing-translation-handler\";\nimport {TranslateCompiler} from \"./translate.compiler\";\nimport {TranslateLoader} from \"./translate.loader\";\nimport {TranslateParser} from \"./translate.parser\";\n\nimport {TranslateStore} from \"./translate.store\";\nimport {isDefined, mergeDeep} from \"./util\";\n\nexport const USE_STORE = new InjectionToken<string>('USE_STORE');\nexport const USE_DEFAULT_LANG = new InjectionToken<string>('USE_DEFAULT_LANG');\n\nexport interface TranslationChangeEvent {\n  translations: any;\n  lang: string;\n}\n\nexport interface LangChangeEvent {\n  lang: string;\n  translations: any;\n}\n\nexport interface DefaultLangChangeEvent {\n  lang: string;\n  translations: any;\n}\n\ndeclare interface Window {\n  navigator: any;\n}\n\ndeclare const window: Window;\n\n@Injectable()\nexport class TranslateService {\n  private loadingTranslations: Observable<any>;\n  private pending: boolean = false;\n  private _onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n  private _onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n  private _onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n  private _defaultLang: string;\n  private _currentLang: string;\n  private _langs: Array<string> = [];\n  private _translations: any = {};\n  private _translationRequests: any = {};\n\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onTranslationChange(): EventEmitter<TranslationChangeEvent> {\n    return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n  }\n\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onLangChange(): EventEmitter<LangChangeEvent> {\n    return this.isolate ? this._onLangChange : this.store.onLangChange;\n  }\n\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onDefaultLangChange() {\n    return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n  }\n\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   */\n  get defaultLang(): string {\n    return this.isolate ? this._defaultLang : this.store.defaultLang;\n  }\n\n  set defaultLang(defaultLang: string) {\n    if (this.isolate) {\n      this._defaultLang = defaultLang;\n    } else {\n      this.store.defaultLang = defaultLang;\n    }\n  }\n\n  /**\n   * The lang currently used\n   */\n  get currentLang(): string {\n    return this.isolate ? this._currentLang : this.store.currentLang;\n  }\n\n  set currentLang(currentLang: string) {\n    if (this.isolate) {\n      this._currentLang = currentLang;\n    } else {\n      this.store.currentLang = currentLang;\n    }\n  }\n\n  /**\n   * an array of langs\n   */\n  get langs(): string[] {\n    return this.isolate ? this._langs : this.store.langs;\n  }\n\n  set langs(langs: string[]) {\n    if (this.isolate) {\n      this._langs = langs;\n    } else {\n      this.store.langs = langs;\n    }\n  }\n\n  /**\n   * a list of translations per lang\n   */\n  get translations(): any {\n    return this.isolate ? this._translations : this.store.translations;\n  }\n\n  set translations(translations: any) {\n    if (this.isolate) {\n      this._translations = translations;\n    } else {\n      this.store.translations = translations;\n    }\n  }\n\n  /**\n   *\n   * @param store an instance of the store (that is supposed to be unique)\n   * @param currentLoader An instance of the loader currently used\n   * @param compiler An instance of the compiler currently used\n   * @param parser An instance of the parser currently used\n   * @param missingTranslationHandler A handler for missing translations.\n   * @param isolate whether this service should use the store or not\n   * @param useDefaultLang whether we should use default language translation when current language translation is missing.\n   */\n  constructor(public store: TranslateStore,\n              public currentLoader: TranslateLoader,\n              public compiler: TranslateCompiler,\n              public parser: TranslateParser,\n              public missingTranslationHandler: MissingTranslationHandler,\n              @Inject(USE_DEFAULT_LANG) private useDefaultLang: boolean = true,\n              @Inject(USE_STORE) private isolate: boolean = false) {\n  }\n\n  /**\n   * Sets the default language to use as a fallback\n   */\n  public setDefaultLang(lang: string): void {\n    if (lang === this.defaultLang) {\n      return;\n    }\n\n    let pending: Observable<any> = this.retrieveTranslations(lang);\n\n    if (typeof pending !== \"undefined\") {\n      // on init set the defaultLang immediately\n      if (!this.defaultLang) {\n        this.defaultLang = lang;\n      }\n\n      pending.pipe(take(1))\n        .subscribe((res: any) => {\n          this.changeDefaultLang(lang);\n        });\n    } else { // we already have this language\n      this.changeDefaultLang(lang);\n    }\n  }\n\n  /**\n   * Gets the default language used\n   */\n  public getDefaultLang(): string {\n    return this.defaultLang;\n  }\n\n  /**\n   * Changes the lang currently used\n   */\n  public use(lang: string): Observable<any> {\n    // don't change the language if the language given is already selected\n    if (lang === this.currentLang) {\n      return of(this.translations[lang]);\n    }\n\n    let pending: Observable<any> = this.retrieveTranslations(lang);\n\n    if (typeof pending !== \"undefined\") {\n      // on init set the currentLang immediately\n      if (!this.currentLang) {\n        this.currentLang = lang;\n      }\n\n      pending.pipe(take(1))\n        .subscribe((res: any) => {\n          this.changeLang(lang);\n        });\n\n      return pending;\n    } else { // we have this language, return an Observable\n      this.changeLang(lang);\n\n      return of(this.translations[lang]);\n    }\n  }\n\n  /**\n   * Retrieves the given translations\n   */\n  private retrieveTranslations(lang: string): Observable<any> {\n    let pending: Observable<any>;\n\n    // if this language is unavailable, ask for it\n    if (typeof this.translations[lang] === \"undefined\") {\n      this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n      pending = this._translationRequests[lang];\n    }\n\n    return pending;\n  }\n\n  /**\n   * Gets an object of translations for a given language with the current loader\n   * and passes it through the compiler\n   */\n  public getTranslation(lang: string): Observable<any> {\n    this.pending = true;\n    this.loadingTranslations = this.currentLoader.getTranslation(lang).pipe(share());\n\n    this.loadingTranslations.pipe(take(1))\n      .subscribe((res: Object) => {\n        this.translations[lang] = this.compiler.compileTranslations(res, lang);\n        this.updateLangs();\n        this.pending = false;\n      }, (err: any) => {\n        this.pending = false;\n      });\n\n    return this.loadingTranslations;\n  }\n\n  /**\n   * Manually sets an object of translations for a given language\n   * after passing it through the compiler\n   */\n  public setTranslation(lang: string, translations: Object, shouldMerge: boolean = false): void {\n    translations = this.compiler.compileTranslations(translations, lang);\n    if (shouldMerge && this.translations[lang]) {\n      this.translations[lang] = mergeDeep(this.translations[lang], translations);\n    } else {\n      this.translations[lang] = translations;\n    }\n    this.updateLangs();\n    this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n  }\n\n  /**\n   * Returns an array of currently available langs\n   */\n  public getLangs(): Array<string> {\n    return this.langs;\n  }\n\n  /**\n   * Add available langs\n   */\n  public addLangs(langs: Array<string>): void {\n    langs.forEach((lang: string) => {\n      if (this.langs.indexOf(lang) === -1) {\n        this.langs.push(lang);\n      }\n    });\n  }\n\n  /**\n   * Update the list of available langs\n   */\n  private updateLangs(): void {\n    this.addLangs(Object.keys(this.translations));\n  }\n\n  /**\n   * Returns the parsed result of the translations\n   */\n  public getParsedResult(translations: any, key: any, interpolateParams?: Object): any {\n    let res: string | Observable<string>;\n\n    if (key instanceof Array) {\n      let result: any = {},\n        observables: boolean = false;\n      for (let k of key) {\n        result[k] = this.getParsedResult(translations, k, interpolateParams);\n        if (typeof result[k].subscribe === \"function\") {\n          observables = true;\n        }\n      }\n      if (observables) {\n        let mergedObs: Observable<string>;\n        for (let k of key) {\n          let obs = typeof result[k].subscribe === \"function\" ? result[k] : of(result[k] as string);\n          if (typeof mergedObs === \"undefined\") {\n            mergedObs = obs;\n          } else {\n            mergedObs = merge(mergedObs, obs);\n          }\n        }\n        return mergedObs.pipe(\n          toArray(),\n          map((arr: Array<string>) => {\n            let obj: any = {};\n            arr.forEach((value: string, index: number) => {\n              obj[key[index]] = value;\n            });\n            return obj;\n          })\n        );\n      }\n      return result;\n    }\n\n    if (translations) {\n      res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n    }\n\n    if (typeof res === \"undefined\" && this.defaultLang && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n      res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n    }\n\n    if (typeof res === \"undefined\") {\n      let params: MissingTranslationHandlerParams = {key, translateService: this};\n      if (typeof interpolateParams !== 'undefined') {\n        params.interpolateParams = interpolateParams;\n      }\n      res = this.missingTranslationHandler.handle(params);\n    }\n\n    return typeof res !== \"undefined\" ? res : key;\n  }\n\n  /**\n   * Gets the translated value of a key (or an array of keys)\n   * @returns the translated key, or an object of translated keys\n   */\n  public get(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n    // check if we are loading a new translation to use\n    if (this.pending) {\n      return Observable.create((observer: Observer<string>) => {\n        let onComplete = (res: string) => {\n          observer.next(res);\n          observer.complete();\n        };\n        let onError = (err: any) => {\n          observer.error(err);\n        };\n        this.loadingTranslations.subscribe((res: any) => {\n          res = this.getParsedResult(this.compiler.compileTranslations(res, this.currentLang), key, interpolateParams);\n          if (typeof res.subscribe === \"function\") {\n            res.subscribe(onComplete, onError);\n          } else {\n            onComplete(res);\n          }\n        }, onError);\n      });\n    } else {\n      let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n      if (typeof res.subscribe === \"function\") {\n        return res;\n      } else {\n        return of(res);\n      }\n    }\n  }\n\n  /**\n   * Returns a stream of translated values of a key (or an array of keys) which updates\n   * whenever the language changes.\n   * @returns A stream of the translated key, or an object of translated keys\n   */\n  public stream(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n\n    return concat(\n      this.get(key, interpolateParams),\n      this.onLangChange.pipe(\n        switchMap((event: LangChangeEvent) => {\n          const res = this.getParsedResult(event.translations, key, interpolateParams);\n          if (typeof res.subscribe === \"function\") {\n            return res;\n          } else {\n            return of(res);\n          }\n        })\n      ));\n  }\n\n  /**\n   * Returns a translation instantly from the internal state of loaded translation.\n   * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n   */\n  public instant(key: string | Array<string>, interpolateParams?: Object): string | any {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n\n    let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n    if (typeof res.subscribe !== \"undefined\") {\n      if (key instanceof Array) {\n        let obj: any = {};\n        key.forEach((value: string, index: number) => {\n          obj[key[index]] = key[index];\n        });\n        return obj;\n      }\n      return key;\n    } else {\n      return res;\n    }\n  }\n\n  /**\n   * Sets the translated value of a key, after compiling it\n   */\n  public set(key: string, value: string, lang: string = this.currentLang): void {\n    this.translations[lang][key] = this.compiler.compile(value, lang);\n    this.updateLangs();\n    this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n  }\n\n  /**\n   * Changes the current lang\n   */\n  private changeLang(lang: string): void {\n    this.currentLang = lang;\n    this.onLangChange.emit({lang: lang, translations: this.translations[lang]});\n\n    // if there is no default lang, use the one that we just set\n    if (!this.defaultLang) {\n      this.changeDefaultLang(lang);\n    }\n  }\n\n  /**\n   * Changes the default lang\n   */\n  private changeDefaultLang(lang: string): void {\n    this.defaultLang = lang;\n    this.onDefaultLangChange.emit({lang: lang, translations: this.translations[lang]});\n  }\n\n  /**\n   * Allows to reload the lang file from the file\n   */\n  public reloadLang(lang: string): Observable<any> {\n    this.resetLang(lang);\n    return this.getTranslation(lang);\n  }\n\n  /**\n   * Deletes inner translation\n   */\n  public resetLang(lang: string): void {\n    this._translationRequests[lang] = undefined;\n    this.translations[lang] = undefined;\n  }\n\n  /**\n   * Returns the language code name from the browser, e.g. \"de\"\n   */\n  public getBrowserLang(): string {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n\n    let browserLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n    if (browserLang.indexOf('-') !== -1) {\n      browserLang = browserLang.split('-')[0];\n    }\n\n    if (browserLang.indexOf('_') !== -1) {\n      browserLang = browserLang.split('_')[0];\n    }\n\n    return browserLang;\n  }\n\n  /**\n   * Returns the culture language code name from the browser, e.g. \"de-DE\"\n   */\n  public getBrowserCultureLang(): string {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n\n    let browserCultureLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n    return browserCultureLang;\n  }\n}\n",
    "import {AfterViewChecked, ChangeDetectorRef, Directive, ElementRef, Input, OnDestroy} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslateService, TranslationChangeEvent} from './translate.service';\nimport {equals, isDefined} from './util';\n\n@Directive({\n  selector: '[translate],[ngx-translate]'\n})\nexport class TranslateDirective implements AfterViewChecked, OnDestroy {\n  key: string;\n  lastParams: any;\n  currentParams: any;\n  onLangChangeSub: Subscription;\n  onDefaultLangChangeSub: Subscription;\n  onTranslationChangeSub: Subscription;\n\n  @Input() set translate(key: string) {\n    if (key) {\n      this.key = key;\n      this.checkNodes();\n    }\n  }\n\n  @Input() set translateParams(params: any) {\n    if (!equals(this.currentParams, params)) {\n      this.currentParams = params;\n      this.checkNodes(true);\n    }\n  }\n\n  constructor(private translateService: TranslateService, private element: ElementRef, private _ref: ChangeDetectorRef) {\n    // subscribe to onTranslationChange event, in case the translations of the current lang change\n    if (!this.onTranslationChangeSub) {\n      this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n        if (event.lang === this.translateService.currentLang) {\n          this.checkNodes(true, event.translations);\n        }\n      });\n    }\n\n    // subscribe to onLangChange event, in case the language changes\n    if (!this.onLangChangeSub) {\n      this.onLangChangeSub = this.translateService.onLangChange.subscribe((event: LangChangeEvent) => {\n        this.checkNodes(true, event.translations);\n      });\n    }\n\n    // subscribe to onDefaultLangChange event, in case the default language changes\n    if (!this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((event: DefaultLangChangeEvent) => {\n        this.checkNodes(true);\n      });\n    }\n  }\n\n  ngAfterViewChecked() {\n    this.checkNodes();\n  }\n\n  checkNodes(forceUpdate = false, translations?: any) {\n    let nodes: NodeList = this.element.nativeElement.childNodes;\n    // if the element is empty\n    if (!nodes.length) {\n      // we add the key as content\n      this.setContent(this.element.nativeElement, this.key);\n      nodes = this.element.nativeElement.childNodes;\n    }\n    for (let i = 0; i < nodes.length; ++i) {\n      let node: any = nodes[i];\n      if (node.nodeType === 3) { // node type 3 is a text node\n        let key: string;\n        if (this.key) {\n          key = this.key;\n          if (forceUpdate) {\n            node.lastKey = null;\n          }\n        } else {\n          let content = this.getContent(node);\n          let trimmedContent = content.trim();\n          if (trimmedContent.length) {\n            // we want to use the content as a key, not the translation value\n            if (content !== node.currentValue) {\n              key = trimmedContent;\n              // the content was changed from the user, we'll use it as a reference if needed\n              node.originalContent = this.getContent(node);\n            } else if (node.originalContent && forceUpdate) { // the content seems ok, but the lang has changed\n              node.lastKey = null;\n              // the current content is the translation, not the key, use the last real content as key\n              key = node.originalContent.trim();\n            }\n          }\n        }\n        this.updateValue(key, node, translations);\n      }\n    }\n  }\n\n  updateValue(key: string, node: any, translations: any) {\n    if (key) {\n      if (node.lastKey === key && this.lastParams === this.currentParams) {\n        return;\n      }\n\n      this.lastParams = this.currentParams;\n\n      let onTranslation = (res: string) => {\n        if (res !== key) {\n          node.lastKey = key;\n        }\n        if (!node.originalContent) {\n          node.originalContent = this.getContent(node);\n        }\n        node.currentValue = isDefined(res) ? res : (node.originalContent || key);\n        // we replace in the original content to preserve spaces that we might have trimmed\n        this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n        this._ref.markForCheck();\n      };\n\n      if (isDefined(translations)) {\n        let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n        if (typeof res.subscribe === \"function\") {\n          res.subscribe(onTranslation);\n        } else {\n          onTranslation(res);\n        }\n      } else {\n        this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n      }\n    }\n  }\n\n  getContent(node: any): string {\n    return isDefined(node.textContent) ? node.textContent : node.data;\n  }\n\n  setContent(node: any, content: string): void {\n    if (isDefined(node.textContent)) {\n      node.textContent = content;\n    } else {\n      node.data = content;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.onLangChangeSub) {\n      this.onLangChangeSub.unsubscribe();\n    }\n\n    if (this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub.unsubscribe();\n    }\n\n    if (this.onTranslationChangeSub) {\n      this.onTranslationChangeSub.unsubscribe();\n    }\n  }\n}\n",
    "import {ChangeDetectorRef, EventEmitter, Injectable, OnDestroy, Pipe, PipeTransform} from '@angular/core';\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslateService, TranslationChangeEvent} from './translate.service';\nimport {equals, isDefined} from './util';\n\n@Injectable()\n@Pipe({\n  name: 'translate',\n  pure: false // required to update the value when the promise is resolved\n})\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n  value: string = '';\n  lastKey: string;\n  lastParams: any[];\n  onTranslationChange: EventEmitter<TranslationChangeEvent>;\n  onLangChange: EventEmitter<LangChangeEvent>;\n  onDefaultLangChange: EventEmitter<DefaultLangChangeEvent>;\n\n  constructor(private translate: TranslateService, private _ref: ChangeDetectorRef) {\n  }\n\n  updateValue(key: string, interpolateParams?: Object, translations?: any): void {\n    let onTranslation = (res: string) => {\n      this.value = res !== undefined ? res : key;\n      this.lastKey = key;\n      this._ref.markForCheck();\n    };\n    if (translations) {\n      let res = this.translate.getParsedResult(translations, key, interpolateParams);\n      if (typeof res.subscribe === 'function') {\n        res.subscribe(onTranslation);\n      } else {\n        onTranslation(res);\n      }\n    }\n    this.translate.get(key, interpolateParams).subscribe(onTranslation);\n  }\n\n  transform(query: string, ...args: any[]): any {\n    if (!query || query.length === 0) {\n      return query;\n    }\n\n    // if we ask another time for the same key, return the last value\n    if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n      return this.value;\n    }\n\n    let interpolateParams: Object;\n    if (isDefined(args[0]) && args.length) {\n      if (typeof args[0] === 'string' && args[0].length) {\n        // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n        // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n        let validArgs: string = args[0]\n          .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\n          .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n        try {\n          interpolateParams = JSON.parse(validArgs);\n        } catch (e) {\n          throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n        }\n      } else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n        interpolateParams = args[0];\n      }\n    }\n\n    // store the query, in case it changes\n    this.lastKey = query;\n\n    // store the params, in case they change\n    this.lastParams = args;\n\n    // set the value\n    this.updateValue(query, interpolateParams);\n\n    // if there is a subscription to onLangChange, clean it\n    this._dispose();\n\n    // subscribe to onTranslationChange event, in case the translations change\n    if (!this.onTranslationChange) {\n      this.onTranslationChange = this.translate.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n        if (this.lastKey && event.lang === this.translate.currentLang) {\n          this.lastKey = null;\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    }\n\n    // subscribe to onLangChange event, in case the language changes\n    if (!this.onLangChange) {\n      this.onLangChange = this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    }\n\n    // subscribe to onDefaultLangChange event, in case the default language changes\n    if (!this.onDefaultLangChange) {\n      this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n          this.updateValue(query, interpolateParams);\n        }\n      });\n    }\n\n    return this.value;\n  }\n\n  /**\n   * Clean any existing subscription to change events\n   */\n  private _dispose(): void {\n    if (typeof this.onTranslationChange !== 'undefined') {\n      this.onTranslationChange.unsubscribe();\n      this.onTranslationChange = undefined;\n    }\n    if (typeof this.onLangChange !== 'undefined') {\n      this.onLangChange.unsubscribe();\n      this.onLangChange = undefined;\n    }\n    if (typeof this.onDefaultLangChange !== 'undefined') {\n      this.onDefaultLangChange.unsubscribe();\n      this.onDefaultLangChange = undefined;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._dispose();\n  }\n}\n",
    "import {NgModule, ModuleWithProviders, Provider} from \"@angular/core\";\nimport {TranslateLoader, TranslateFakeLoader} from \"./src/translate.loader\";\nimport {TranslateService} from \"./src/translate.service\";\nimport {MissingTranslationHandler, FakeMissingTranslationHandler} from \"./src/missing-translation-handler\";\nimport {TranslateParser, TranslateDefaultParser} from \"./src/translate.parser\";\nimport {TranslateCompiler, TranslateFakeCompiler} from \"./src/translate.compiler\";\nimport {TranslateDirective} from \"./src/translate.directive\";\nimport {TranslatePipe} from \"./src/translate.pipe\";\nimport {TranslateStore} from \"./src/translate.store\";\nimport {USE_STORE} from \"./src/translate.service\";\nimport {USE_DEFAULT_LANG} from \"./src/translate.service\";\n\nexport * from \"./src/translate.loader\";\nexport * from \"./src/translate.service\";\nexport * from \"./src/missing-translation-handler\";\nexport * from \"./src/translate.parser\";\nexport * from \"./src/translate.compiler\";\nexport * from \"./src/translate.directive\";\nexport * from \"./src/translate.pipe\";\n\nexport interface TranslateModuleConfig {\n    loader?: Provider;\n    compiler?: Provider;\n    parser?: Provider;\n    missingTranslationHandler?: Provider;\n    // isolate the service instance, only works for lazy loaded modules or components with the \"providers\" property\n    isolate?: boolean;\n    useDefaultLang?: boolean;\n}\n\n@NgModule({\n    declarations: [\n        TranslatePipe,\n        TranslateDirective\n    ],\n    exports: [\n        TranslatePipe,\n        TranslateDirective\n    ]\n})\nexport class TranslateModule {\n    /**\n     * Use this method in your root module to provide the TranslateService\n     */\n    static forRoot(config: TranslateModuleConfig = {}): ModuleWithProviders {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n                config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n                config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n                config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n                TranslateStore,\n                {provide: USE_STORE, useValue: config.isolate},\n                {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n                TranslateService\n            ]\n        };\n    }\n\n    /**\n     * Use this method in your other (non root) modules to import the directive/pipe\n     */\n    static forChild(config: TranslateModuleConfig = {}): ModuleWithProviders {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n                config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n                config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n                config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n                {provide: USE_STORE, useValue: config.isolate},\n                {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n                TranslateService\n            ]\n        };\n    }\n}\n"
  ],
  "names": [
    "__extends",
    "d",
    "b",
    "__",
    "this",
    "constructor",
    "extendStatics",
    "prototype",
    "Object",
    "create",
    "__values",
    "o",
    "m",
    "Symbol",
    "iterator",
    "i",
    "call",
    "next",
    "length",
    "value",
    "done",
    "__read",
    "n",
    "r",
    "e",
    "ar",
    "push",
    "error",
    "equals",
    "o1",
    "o2",
    "key",
    "keySet",
    "t1",
    "Array",
    "isArray",
    "isDefined",
    "isObject",
    "item",
    "mergeDeep",
    "target",
    "source",
    "output",
    "assign",
    "keys",
    "forEach",
    "_a",
    "_b",
    "setPrototypeOf",
    "__proto__",
    "p",
    "hasOwnProperty",
    "TranslateLoader",
    "TranslateFakeLoader",
    "_super",
    "tslib_1.__extends",
    "getTranslation",
    "lang",
    "of",
    "type",
    "Injectable",
    "MissingTranslationHandler",
    "FakeMissingTranslationHandler",
    "handle",
    "params",
    "TranslateCompiler",
    "TranslateFakeCompiler",
    "compile",
    "compileTranslations",
    "translations",
    "TranslateParser",
    "TranslateDefaultParser",
    "arguments",
    "concat",
    "_this",
    "templateMatcher",
    "interpolate",
    "expr",
    "interpolateString",
    "interpolateFunction",
    "getValue",
    "split",
    "shift",
    "undefined",
    "fn",
    "replace",
    "substring",
    "TranslateStore",
    "currentLang",
    "defaultLang",
    "langs",
    "onTranslationChange",
    "EventEmitter",
    "onLangChange",
    "onDefaultLangChange",
    "USE_STORE",
    "InjectionToken",
    "USE_DEFAULT_LANG",
    "TranslateService",
    "store",
    "currentLoader",
    "compiler",
    "parser",
    "missingTranslationHandler",
    "useDefaultLang",
    "isolate",
    "pending",
    "_onTranslationChange",
    "_onLangChange",
    "_onDefaultLangChange",
    "_langs",
    "_translations",
    "_translationRequests",
    "defineProperty",
    "get",
    "_defaultLang",
    "set",
    "_currentLang",
    "setDefaultLang",
    "retrieveTranslations",
    "pipe",
    "take",
    "subscribe",
    "res",
    "changeDefaultLang",
    "getDefaultLang",
    "use",
    "changeLang",
    "loadingTranslations",
    "share",
    "updateLangs",
    "err",
    "setTranslation",
    "shouldMerge",
    "emit",
    "getLangs",
    "addLangs",
    "indexOf",
    "getParsedResult",
    "interpolateParams",
    "result",
    "observables",
    "key_1",
    "tslib_1.__values",
    "key_1_1",
    "k",
    "mergedObs",
    "key_2",
    "key_2_1",
    "obs",
    "merge",
    "toArray",
    "map",
    "arr",
    "obj",
    "index",
    "translateService",
    "Error",
    "Observable",
    "observer",
    "onComplete",
    "complete",
    "onError",
    "stream",
    "switchMap",
    "event",
    "instant",
    "obj_1",
    "reloadLang",
    "resetLang",
    "getBrowserLang",
    "window",
    "navigator",
    "browserLang",
    "languages",
    "language",
    "browserLanguage",
    "userLanguage",
    "getBrowserCultureLang",
    "browserCultureLang",
    "decorators",
    "Inject",
    "args",
    "TranslateDirective",
    "element",
    "_ref",
    "onTranslationChangeSub",
    "checkNodes",
    "onLangChangeSub",
    "onDefaultLangChangeSub",
    "currentParams",
    "ngAfterViewChecked",
    "forceUpdate",
    "nodes",
    "nativeElement",
    "childNodes",
    "setContent",
    "node",
    "nodeType",
    "lastKey",
    "content",
    "getContent",
    "trimmedContent",
    "trim",
    "currentValue",
    "originalContent",
    "updateValue",
    "lastParams",
    "onTranslation",
    "markForCheck",
    "textContent",
    "data",
    "ngOnDestroy",
    "unsubscribe",
    "Directive",
    "selector",
    "ElementRef",
    "ChangeDetectorRef",
    "translate",
    "Input",
    "translateParams",
    "TranslatePipe",
    "transform",
    "query",
    "_i",
    "validArgs",
    "JSON",
    "parse",
    "SyntaxError",
    "_dispose",
    "Pipe",
    "name",
    "pure",
    "TranslateModule",
    "forRoot",
    "config",
    "ngModule",
    "providers",
    "loader",
    "provide",
    "useClass",
    "useValue",
    "forChild",
    "NgModule",
    "declarations",
    "exports"
  ],
  "mappings": "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"
}
