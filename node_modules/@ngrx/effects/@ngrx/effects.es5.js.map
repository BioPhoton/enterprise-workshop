{"version":3,"file":"effects.es5.js","sources":["../../../modules/effects/src/effects_module.ts","../../../modules/effects/src/effects_feature_module.ts","../../../modules/effects/src/effects_root_module.ts","../../../modules/effects/src/effects_runner.ts","../../../modules/effects/src/tokens.ts","../../../modules/effects/src/effect_sources.ts","../../../modules/effects/src/effect_notification.ts","../../../modules/effects/src/actions.ts","../../../modules/effects/src/effects_resolver.ts","../../../modules/effects/src/on_run_effects.ts","../../../modules/effects/src/effects_metadata.ts"],"sourcesContent":["import { NgModule, ModuleWithProviders, Type } from '@angular/core';\nimport { EffectSources } from './effect_sources';\nimport { Actions } from './actions';\nimport { ROOT_EFFECTS, FEATURE_EFFECTS } from './tokens';\nimport { EffectsFeatureModule } from './effects_feature_module';\nimport { EffectsRootModule } from './effects_root_module';\nimport { EffectsRunner } from './effects_runner';\n\n@NgModule({})\nexport class EffectsModule {\n  static forFeature(featureEffects: Type<any>[]): ModuleWithProviders {\n    return {\n      ngModule: EffectsFeatureModule,\n      providers: [\n        featureEffects,\n        {\n          provide: FEATURE_EFFECTS,\n          multi: true,\n          deps: featureEffects,\n          useFactory: createSourceInstances,\n        },\n      ],\n    };\n  }\n\n  static forRoot(rootEffects: Type<any>[]): ModuleWithProviders {\n    return {\n      ngModule: EffectsRootModule,\n      providers: [\n        EffectsRunner,\n        EffectSources,\n        Actions,\n        rootEffects,\n        {\n          provide: ROOT_EFFECTS,\n          deps: rootEffects,\n          useFactory: createSourceInstances,\n        },\n      ],\n    };\n  }\n}\n\nexport function createSourceInstances(...instances: any[]) {\n  return instances;\n}\n","import { NgModule, Inject, Optional } from '@angular/core';\nimport { StoreRootModule, StoreFeatureModule } from '@ngrx/store';\nimport { EffectsRootModule } from './effects_root_module';\nimport { FEATURE_EFFECTS } from './tokens';\n\n@NgModule({})\nexport class EffectsFeatureModule {\n  constructor(\n    private root: EffectsRootModule,\n    @Inject(FEATURE_EFFECTS) effectSourceGroups: any[][],\n    @Optional() storeRootModule: StoreRootModule,\n    @Optional() storeFeatureModule: StoreFeatureModule\n  ) {\n    effectSourceGroups.forEach(group =>\n      group.forEach(effectSourceInstance =>\n        root.addEffects(effectSourceInstance)\n      )\n    );\n  }\n}\n","import { NgModule, Inject, Optional } from '@angular/core';\nimport {\n  StoreModule,\n  Store,\n  StoreRootModule,\n  StoreFeatureModule,\n} from '@ngrx/store';\nimport { EffectsRunner } from './effects_runner';\nimport { EffectSources } from './effect_sources';\nimport { ROOT_EFFECTS } from './tokens';\n\nexport const ROOT_EFFECTS_INIT = '@ngrx/effects/init';\n\n@NgModule({})\nexport class EffectsRootModule {\n  constructor(\n    private sources: EffectSources,\n    runner: EffectsRunner,\n    store: Store<any>,\n    @Inject(ROOT_EFFECTS) rootEffects: any[],\n    @Optional() storeRootModule: StoreRootModule,\n    @Optional() storeFeatureModule: StoreFeatureModule\n  ) {\n    runner.start();\n\n    rootEffects.forEach(effectSourceInstance =>\n      sources.addEffects(effectSourceInstance)\n    );\n\n    store.dispatch({ type: ROOT_EFFECTS_INIT });\n  }\n\n  addEffects(effectSourceInstance: any) {\n    this.sources.addEffects(effectSourceInstance);\n  }\n}\n","import { Subscription } from 'rxjs/Subscription';\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { EffectSources } from './effect_sources';\n\n@Injectable()\nexport class EffectsRunner implements OnDestroy {\n  private effectsSubscription: Subscription | null = null;\n\n  constructor(\n    private effectSources: EffectSources,\n    private store: Store<any>\n  ) {}\n\n  start() {\n    if (!this.effectsSubscription) {\n      this.effectsSubscription = this.effectSources\n        .toActions()\n        .subscribe(this.store);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.effectsSubscription) {\n      this.effectsSubscription.unsubscribe();\n      this.effectsSubscription = null;\n    }\n  }\n}\n","import { InjectionToken, Type } from '@angular/core';\n\nexport const IMMEDIATE_EFFECTS = new InjectionToken<any[]>(\n  'ngrx/effects: Immediate Effects'\n);\nexport const ROOT_EFFECTS = new InjectionToken<Type<any>[]>(\n  'ngrx/effects: Root Effects'\n);\nexport const FEATURE_EFFECTS = new InjectionToken<any[][]>(\n  'ngrx/effects: Feature Effects'\n);\n","import { groupBy, GroupedObservable } from 'rxjs/operator/groupBy';\nimport { mergeMap } from 'rxjs/operator/mergeMap';\nimport { exhaustMap } from 'rxjs/operator/exhaustMap';\nimport { map } from 'rxjs/operator/map';\nimport { dematerialize } from 'rxjs/operator/dematerialize';\nimport { filter } from 'rxjs/operator/filter';\nimport { concat } from 'rxjs/observable/concat';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { Notification } from 'rxjs/Notification';\nimport { ErrorHandler, Injectable } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { EffectNotification, verifyOutput } from './effect_notification';\nimport { getSourceForInstance } from './effects_metadata';\nimport { resolveEffectSource } from './effects_resolver';\n\n@Injectable()\nexport class EffectSources extends Subject<any> {\n  constructor(private errorHandler: ErrorHandler) {\n    super();\n  }\n\n  addEffects(effectSourceInstance: any) {\n    this.next(effectSourceInstance);\n  }\n\n  /**\n   * @internal\n   */\n  toActions(): Observable<Action> {\n    return mergeMap.call(\n      groupBy.call(this, getSourceForInstance),\n      (source$: GroupedObservable<any, any>) =>\n        dematerialize.call(\n          filter.call(\n            map.call(\n              exhaustMap.call(source$, resolveEffectSource),\n              (output: EffectNotification) => {\n                verifyOutput(output, this.errorHandler);\n\n                return output.notification;\n              }\n            ),\n            (notification: Notification<any>) => notification.kind === 'N'\n          )\n        )\n    );\n  }\n}\n","import { Observable } from 'rxjs/Observable';\nimport { Notification } from 'rxjs/Notification';\nimport { Action } from '@ngrx/store';\nimport { ErrorHandler } from '@angular/core';\n\nexport interface EffectNotification {\n  effect: Observable<any> | (() => Observable<any>);\n  propertyName: string;\n  sourceName: string;\n  sourceInstance: any;\n  notification: Notification<Action | null | undefined>;\n}\n\nexport function verifyOutput(\n  output: EffectNotification,\n  reporter: ErrorHandler\n) {\n  reportErrorThrown(output, reporter);\n  reportInvalidActions(output, reporter);\n}\n\nfunction reportErrorThrown(output: EffectNotification, reporter: ErrorHandler) {\n  if (output.notification.kind === 'E') {\n    reporter.handleError(output.notification.error);\n  }\n}\n\nfunction reportInvalidActions(\n  output: EffectNotification,\n  reporter: ErrorHandler\n) {\n  if (output.notification.kind === 'N') {\n    const action = output.notification.value;\n    const isInvalidAction = !isAction(action);\n\n    if (isInvalidAction) {\n      reporter.handleError(\n        new Error(\n          `Effect ${getEffectName(output)} dispatched an invalid action: ${\n            action\n          }`\n        )\n      );\n    }\n  }\n}\n\nfunction isAction(action: any): action is Action {\n  return action && action.type && typeof action.type === 'string';\n}\n\nfunction getEffectName({\n  propertyName,\n  sourceInstance,\n  sourceName,\n}: EffectNotification) {\n  const isMethod = typeof sourceInstance[propertyName] === 'function';\n\n  return `\"${sourceName}.${propertyName}${isMethod ? '()' : ''}\"`;\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Action, ScannedActionsSubject } from '@ngrx/store';\nimport { Observable } from 'rxjs/Observable';\nimport { Operator } from 'rxjs/Operator';\nimport { filter } from 'rxjs/operators';\nimport { OperatorFunction } from 'rxjs/interfaces';\n\n@Injectable()\nexport class Actions<V = Action> extends Observable<V> {\n  constructor(@Inject(ScannedActionsSubject) source?: Observable<V>) {\n    super();\n\n    if (source) {\n      this.source = source;\n    }\n  }\n\n  lift<R>(operator: Operator<V, R>): Observable<R> {\n    const observable = new Actions<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  ofType<V2 extends V = V>(...allowedTypes: string[]): Actions<V2> {\n    return ofType<any>(...allowedTypes)(this as Actions<any>) as Actions<V2>;\n  }\n}\n\nexport function ofType<T extends Action>(...allowedTypes: string[]) {\n  return filter((action: Action): action is T =>\n    allowedTypes.some(type => type === action.type)\n  );\n}\n","import { merge } from 'rxjs/observable/merge';\nimport { ignoreElements } from 'rxjs/operator/ignoreElements';\nimport { materialize } from 'rxjs/operator/materialize';\nimport { map } from 'rxjs/operator/map';\nimport { Observable } from 'rxjs/Observable';\nimport { Notification } from 'rxjs/Notification';\nimport { Action } from '@ngrx/store';\nimport { EffectNotification } from './effect_notification';\nimport { getSourceMetadata, getSourceForInstance } from './effects_metadata';\nimport { isOnRunEffects } from './on_run_effects';\n\nexport function mergeEffects(\n  sourceInstance: any\n): Observable<EffectNotification> {\n  const sourceName = getSourceForInstance(sourceInstance).constructor.name;\n\n  const observables: Observable<any>[] = getSourceMetadata(sourceInstance).map(\n    ({ propertyName, dispatch }): Observable<EffectNotification> => {\n      const observable: Observable<any> =\n        typeof sourceInstance[propertyName] === 'function'\n          ? sourceInstance[propertyName]()\n          : sourceInstance[propertyName];\n\n      if (dispatch === false) {\n        return ignoreElements.call(observable);\n      }\n\n      const materialized$ = materialize.call(observable);\n\n      return map.call(\n        materialized$,\n        (notification: Notification<Action>): EffectNotification => ({\n          effect: sourceInstance[propertyName],\n          notification,\n          propertyName,\n          sourceName,\n          sourceInstance,\n        })\n      );\n    }\n  );\n\n  return merge(...observables);\n}\n\nexport function resolveEffectSource(sourceInstance: any) {\n  const mergedEffects$ = mergeEffects(sourceInstance);\n\n  if (isOnRunEffects(sourceInstance)) {\n    return sourceInstance.ngrxOnRunEffects(mergedEffects$);\n  }\n\n  return mergedEffects$;\n}\n","import { Observable } from 'rxjs/Observable';\nimport { getSourceForInstance } from './effects_metadata';\nimport { EffectNotification } from './effect_notification';\n\nexport interface OnRunEffects {\n  ngrxOnRunEffects(\n    resolvedEffects$: Observable<EffectNotification>\n  ): Observable<EffectNotification>;\n}\n\nconst onRunEffectsKey: keyof OnRunEffects = 'ngrxOnRunEffects';\n\nexport function isOnRunEffects(\n  sourceInstance: Object\n): sourceInstance is OnRunEffects {\n  const source = getSourceForInstance(sourceInstance);\n\n  return (\n    onRunEffectsKey in source && typeof source[onRunEffectsKey] === 'function'\n  );\n}\n","import { merge } from 'rxjs/observable/merge';\nimport { ignoreElements } from 'rxjs/operator/ignoreElements';\nimport { Observable } from 'rxjs/Observable';\nimport { compose } from '@ngrx/store';\n\nconst METADATA_KEY = '__@ngrx/effects__';\nconst r: any = Reflect;\n\nexport interface EffectMetadata {\n  propertyName: string;\n  dispatch: boolean;\n}\n\nfunction getEffectMetadataEntries(sourceProto: any): EffectMetadata[] {\n  return sourceProto.constructor[METADATA_KEY] || [];\n}\n\nfunction setEffectMetadataEntries(sourceProto: any, entries: EffectMetadata[]) {\n  const constructor = sourceProto.constructor;\n  const meta: EffectMetadata[] = constructor.hasOwnProperty(METADATA_KEY)\n    ? (constructor as any)[METADATA_KEY]\n    : Object.defineProperty(constructor, METADATA_KEY, { value: [] })[\n        METADATA_KEY\n      ];\n  Array.prototype.push.apply(meta, entries);\n}\n\nexport function Effect({ dispatch } = { dispatch: true }): PropertyDecorator {\n  return function(target: any, propertyName: string) {\n    const metadata: EffectMetadata = { propertyName, dispatch };\n    setEffectMetadataEntries(target, [metadata]);\n  };\n}\n\nexport function getSourceForInstance(instance: Object): any {\n  return Object.getPrototypeOf(instance);\n}\n\nexport const getSourceMetadata = compose(\n  getEffectMetadataEntries,\n  getSourceForInstance\n);\n\nexport type EffectsMetadata<T> = {\n  [key in keyof T]?:\n    | undefined\n    | {\n        dispatch: boolean;\n      }\n};\n\nexport function getEffectsMetadata<T>(instance: T): EffectsMetadata<T> {\n  const metadata: EffectsMetadata<T> = {};\n\n  getSourceMetadata(instance).forEach(({ propertyName, dispatch }) => {\n    metadata[propertyName] = { dispatch };\n  });\n\n  return metadata;\n}\n"],"names":["store","Subject","dematerialize","mergeMap","groupBy","filter","map","exhaustMap","Observable","merge","materialize","ignoreElements"],"mappings":"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"}