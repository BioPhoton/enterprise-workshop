{"version":3,"file":"router-store.js","sources":["../../../modules/router-store/src/router_store_module.ts","../../../modules/router-store/src/serializer.ts"],"sourcesContent":["import {\n  NgModule,\n  ModuleWithProviders,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  NavigationCancel,\n  NavigationError,\n  Router,\n  RouterStateSnapshot,\n  RoutesRecognized,\n} from '@angular/router';\nimport { Store, select } from '@ngrx/store';\nimport { of } from 'rxjs/observable/of';\nimport {\n  DefaultRouterStateSerializer,\n  RouterStateSerializer,\n} from './serializer';\n/**\n * An action dispatched when the router navigates.\n */\nexport const ROUTER_NAVIGATION = 'ROUTER_NAVIGATION';\n\n/**\n * Payload of ROUTER_NAVIGATION.\n */\nexport type RouterNavigationPayload<T> = {\n  routerState: T;\n  event: RoutesRecognized;\n};\n\n/**\n * An action dispatched when the router navigates.\n */\nexport type RouterNavigationAction<T = RouterStateSnapshot> = {\n  type: typeof ROUTER_NAVIGATION;\n  payload: RouterNavigationPayload<T>;\n};\n\n/**\n * An action dispatched when the router cancels navigation.\n */\nexport const ROUTER_CANCEL = 'ROUTER_CANCEL';\n\n/**\n * Payload of ROUTER_CANCEL.\n */\nexport type RouterCancelPayload<T, V> = {\n  routerState: V;\n  storeState: T;\n  event: NavigationCancel;\n};\n\n/**\n * An action dispatched when the router cancel navigation.\n */\nexport type RouterCancelAction<T, V = RouterStateSnapshot> = {\n  type: typeof ROUTER_CANCEL;\n  payload: RouterCancelPayload<T, V>;\n};\n\n/**\n * An action dispatched when the router errors.\n */\nexport const ROUTER_ERROR = 'ROUTE_ERROR';\n\n/**\n * Payload of ROUTER_ERROR.\n */\nexport type RouterErrorPayload<T, V> = {\n  routerState: V;\n  storeState: T;\n  event: NavigationError;\n};\n\n/**\n * An action dispatched when the router errors.\n */\nexport type RouterErrorAction<T, V = RouterStateSnapshot> = {\n  type: typeof ROUTER_ERROR;\n  payload: RouterErrorPayload<T, V>;\n};\n\n/**\n * An union type of router actions.\n */\nexport type RouterAction<T, V = RouterStateSnapshot> =\n  | RouterNavigationAction<V>\n  | RouterCancelAction<T, V>\n  | RouterErrorAction<T, V>;\n\nexport type RouterReducerState<T = RouterStateSnapshot> = {\n  state: T;\n  navigationId: number;\n};\n\nexport function routerReducer<T = RouterStateSnapshot>(\n  state: RouterReducerState<T>,\n  action: RouterAction<any, T>\n): RouterReducerState<T> {\n  switch (action.type) {\n    case ROUTER_NAVIGATION:\n    case ROUTER_ERROR:\n    case ROUTER_CANCEL:\n      return {\n        state: action.payload.routerState,\n        navigationId: action.payload.event.id,\n      };\n    default:\n      return state;\n  }\n}\n\nexport interface StoreRouterConfig {\n  stateKey?: string;\n}\n\nexport const _ROUTER_CONFIG = new InjectionToken(\n  '@ngrx/router-store Internal Configuration'\n);\nexport const ROUTER_CONFIG = new InjectionToken(\n  '@ngrx/router-store Configuration'\n);\nexport const DEFAULT_ROUTER_FEATURENAME = 'routerReducer';\n\nexport function _createDefaultRouterConfig(\n  config: StoreRouterConfig | StoreRouterConfigFunction\n): StoreRouterConfig {\n  let _config: StoreRouterConfig;\n\n  if (typeof config === 'function') {\n    _config = config();\n  } else {\n    _config = config || {};\n  }\n\n  return {\n    stateKey: DEFAULT_ROUTER_FEATURENAME,\n    ..._config,\n  };\n}\n\nexport type StoreRouterConfigFunction = () => StoreRouterConfig;\n\n/**\n * Connects RouterModule with StoreModule.\n *\n * During the navigation, before any guards or resolvers run, the router will dispatch\n * a ROUTER_NAVIGATION action, which has the following signature:\n *\n * ```\n * export type RouterNavigationPayload = {\n *   routerState: RouterStateSnapshot,\n *   event: RoutesRecognized\n * }\n * ```\n *\n * Either a reducer or an effect can be invoked in response to this action.\n * If the invoked reducer throws, the navigation will be canceled.\n *\n * If navigation gets canceled because of a guard, a ROUTER_CANCEL action will be\n * dispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.\n *\n * Both ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation\n * which can be used to restore the consistency of the store.\n *\n * Usage:\n *\n * ```typescript\n * @NgModule({\n *   declarations: [AppCmp, SimpleCmp],\n *   imports: [\n *     BrowserModule,\n *     StoreModule.forRoot(mapOfReducers),\n *     RouterModule.forRoot([\n *       { path: '', component: SimpleCmp },\n *       { path: 'next', component: SimpleCmp }\n *     ]),\n *     StoreRouterConnectingModule\n *   ],\n *   bootstrap: [AppCmp]\n * })\n * export class AppModule {\n * }\n * ```\n */\n@NgModule({\n  providers: [\n    { provide: RouterStateSerializer, useClass: DefaultRouterStateSerializer },\n    {\n      provide: _ROUTER_CONFIG,\n      useValue: { stateKey: DEFAULT_ROUTER_FEATURENAME },\n    },\n    {\n      provide: ROUTER_CONFIG,\n      useFactory: _createDefaultRouterConfig,\n      deps: [_ROUTER_CONFIG],\n    },\n  ],\n})\nexport class StoreRouterConnectingModule {\n  static forRoot(\n    config?: StoreRouterConfig | StoreRouterConfigFunction\n  ): ModuleWithProviders;\n  static forRoot(\n    config: StoreRouterConfig | StoreRouterConfigFunction = {}\n  ): ModuleWithProviders {\n    return {\n      ngModule: StoreRouterConnectingModule,\n      providers: [\n        { provide: _ROUTER_CONFIG, useValue: config },\n        {\n          provide: ROUTER_CONFIG,\n          useFactory: _createDefaultRouterConfig,\n          deps: [_ROUTER_CONFIG],\n        },\n      ],\n    };\n  }\n\n  private routerState: RouterStateSnapshot;\n  private storeState: any;\n  private lastRoutesRecognized: RoutesRecognized;\n\n  private dispatchTriggeredByRouter: boolean = false; // used only in dev mode in combination with routerReducer\n  private navigationTriggeredByDispatch: boolean = false; // used only in dev mode in combination with routerReducer\n  private stateKey: string;\n\n  constructor(\n    private store: Store<any>,\n    private router: Router,\n    private serializer: RouterStateSerializer<RouterStateSnapshot>,\n    @Inject(ROUTER_CONFIG) private config: StoreRouterConfig\n  ) {\n    this.stateKey = this.config.stateKey as string;\n\n    this.setUpBeforePreactivationHook();\n    this.setUpStoreStateListener();\n    this.setUpStateRollbackEvents();\n  }\n\n  private setUpBeforePreactivationHook(): void {\n    (<any>this.router).hooks.beforePreactivation = (\n      routerState: RouterStateSnapshot\n    ) => {\n      this.routerState = this.serializer.serialize(routerState);\n      if (this.shouldDispatchRouterNavigation())\n        this.dispatchRouterNavigation();\n      return of(true);\n    };\n  }\n\n  private setUpStoreStateListener(): void {\n    this.store.subscribe(s => {\n      this.storeState = s;\n    });\n    this.store.pipe(select(this.stateKey)).subscribe(() => {\n      this.navigateIfNeeded();\n    });\n  }\n\n  private shouldDispatchRouterNavigation(): boolean {\n    if (!this.storeState[this.stateKey]) return true;\n    return !this.navigationTriggeredByDispatch;\n  }\n\n  private navigateIfNeeded(): void {\n    if (\n      !this.storeState[this.stateKey] ||\n      !this.storeState[this.stateKey].state\n    ) {\n      return;\n    }\n    if (this.dispatchTriggeredByRouter) return;\n\n    if (this.router.url !== this.storeState[this.stateKey].state.url) {\n      this.navigationTriggeredByDispatch = true;\n      this.router.navigateByUrl(this.storeState[this.stateKey].state.url);\n    }\n  }\n\n  private setUpStateRollbackEvents(): void {\n    this.router.events.subscribe(e => {\n      if (e instanceof RoutesRecognized) {\n        this.lastRoutesRecognized = e;\n      } else if (e instanceof NavigationCancel) {\n        this.dispatchRouterCancel(e);\n      } else if (e instanceof NavigationError) {\n        this.dispatchRouterError(e);\n      }\n    });\n  }\n\n  private dispatchRouterNavigation(): void {\n    this.dispatchRouterAction(ROUTER_NAVIGATION, {\n      routerState: this.routerState,\n      event: new RoutesRecognized(\n        this.lastRoutesRecognized.id,\n        this.lastRoutesRecognized.url,\n        this.lastRoutesRecognized.urlAfterRedirects,\n        this.routerState\n      ),\n    });\n  }\n\n  private dispatchRouterCancel(event: NavigationCancel): void {\n    this.dispatchRouterAction(ROUTER_CANCEL, {\n      routerState: this.routerState,\n      storeState: this.storeState,\n      event,\n    });\n  }\n\n  private dispatchRouterError(event: NavigationError): void {\n    this.dispatchRouterAction(ROUTER_ERROR, {\n      routerState: this.routerState,\n      storeState: this.storeState,\n      event: new NavigationError(event.id, event.url, `${event}`),\n    });\n  }\n\n  private dispatchRouterAction(type: string, payload: any): void {\n    this.dispatchTriggeredByRouter = true;\n    try {\n      this.store.dispatch({ type, payload });\n    } finally {\n      this.dispatchTriggeredByRouter = false;\n      this.navigationTriggeredByDispatch = false;\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { RouterStateSnapshot } from '@angular/router';\n\nexport abstract class RouterStateSerializer<T> {\n  abstract serialize(routerState: RouterStateSnapshot): T;\n}\n\nexport class DefaultRouterStateSerializer\n  implements RouterStateSerializer<RouterStateSnapshot> {\n  serialize(routerState: RouterStateSnapshot) {\n    return routerState;\n  }\n}\n"],"names":["of","router","store"],"mappings":"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"}